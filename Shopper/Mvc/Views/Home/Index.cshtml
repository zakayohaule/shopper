@using Shopper.Mvc.ViewModels
@using Shared.Mvc.Enums
@using Shopper.Extensions.Helpers
@using System.Collections
@using Newtonsoft.Json
@model Shopper.Mvc.ViewModels.DashboardModel
@{
    var model = Model;

    var dates = new List<string>();
    var thisWeekData = new List<int>();
    var lastWeekData = new List<int>();
    for (int i = 0; i < 7; i++)
    {
        var date = DateTime.Now.AddDays(-i);
        var lastWeekDate = DateTime.Now.AddDays(-(i + 7));
        uint sale = 0;
        uint lastWeekSale = 0;
        var sales = model.Sales?.Where(s => s.SaleInvoice.Date.Date == date.Date).AsEnumerable();
        var lastWeekSales = model.Sales?.Where(s => s.SaleInvoice.Date.Date == lastWeekDate.Date).AsEnumerable();
        if (sales != null)
        {
            foreach (var s in sales)
            {
                sale += (uint) (s.Quantity * s.Price);
            }
        }
        if (lastWeekSales != null)
        {
            foreach (var s in lastWeekSales)
            {
                lastWeekSale += (uint) (s.Quantity * s.Price);
            }
        }
        thisWeekData.Add((int) sale);
        lastWeekData.Add((int) lastWeekSale);
        dates.Add($"{date.DateWithSuffix()} {date.ToString("MMM")}");
    }
    dates[0] = "today";
    dates.Reverse();
    thisWeekData.Reverse();
    lastWeekData.Reverse();

    var thisWeekTotal = thisWeekData.Sum();
    var lastWeekTotal = lastWeekData.Sum();
    var percentage = (thisWeekTotal - lastWeekTotal) * 100 / lastWeekTotal;
}

<!-- Left col -->
<section class="col-lg-12 connectedSortable">
    <!-- Custom tabs (Charts with tabs)-->
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">
                <i class="fas fa-chart-pie mr-1"></i>
                Summary
            </h3>
            <div class="card-tools">
                <ul class="nav nav-pills ml-auto">
                    <li class="nav-item">
                        <a class="nav-link active" href="#today-summary" data-toggle="tab">Today</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#week-summary" data-toggle="tab">This Week</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#month-summary" data-toggle="tab">This Month</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#annual-summary" data-toggle="tab">This Year</a>
                    </li>
                </ul>
            </div>
        </div><!-- /.card-header -->
        <div class="card-body">
            <div class="tab-content p-0">
                <!-- Morris chart - Sales -->
                <div class="chart tab-pane active" id="today-summary">
                    <th:partial name="_Summary" model="model.Summaries.SingleOrDefault(s => s.SummaryType == SummaryType.Today)"/>
                </div>
                <div class="chart tab-pane" id="week-summary">
                    <th:partial name="_Summary" model="model.Summaries.SingleOrDefault(s => s.SummaryType == SummaryType.Week)"/>
                </div>
                <div class="chart tab-pane" id="month-summary">
                    <th:partial name="_Summary" model="model.Summaries.SingleOrDefault(s => s.SummaryType == SummaryType.Month)"/>
                </div>
                <div class="chart tab-pane" id="annual-summary">
                    <th:partial name="_Summary" model="model.Summaries.SingleOrDefault(s => s.SummaryType == SummaryType.Year)"/>
                </div>
            </div>
        </div><!-- /.card-body -->
    </div>
    <!-- /.card -->
</section>


<th:partial name="_WeekOrMonthSalesGraph" />

@section scripts
{
    <th:script src="~/plugins/chart.js/Chart.min.js"></th:script>
    <th:script src="~/js/dashboard.js"></th:script>


    <script>

    var dates = @Html.Raw(JsonConvert.SerializeObject(dates));
    var thisWeekData = @Html.Raw(JsonConvert.SerializeObject(thisWeekData));
    var lastWeekData = @Html.Raw(JsonConvert.SerializeObject(lastWeekData));
    var mode = 'index';
    var intersect = true;
    var ticksStyle = {
        fontColor: '#495057',
        fontStyle: 'bold'
    }
    var $visitorsChart = $('#sales-chart');
    // eslint-disable-next-line no-unused-vars
    var visitorsChart = new Chart($visitorsChart, {
        data: {
            labels: dates,
            datasets: [{
                type: 'line',
                data: thisWeekData,
                backgroundColor: 'transparent',
                borderColor: '#007bff',
                pointBorderColor: '#007bff',
                pointBackgroundColor: '#007bff',
                fill: false
                // pointHoverBackgroundColor: '#007bff',
                // pointHoverBorderColor    : '#007bff'
            },
                {
                    type: 'line',
                    data: lastWeekData,
                    backgroundColor: 'tansparent',
                    borderColor: '#ced4da',
                    pointBorderColor: '#ced4da',
                    pointBackgroundColor: '#ced4da',
                    fill: false
                    // pointHoverBackgroundColor: '#ced4da',
                    // pointHoverBorderColor    : '#ced4da'
                }]
        },
        options: {
            maintainAspectRatio: false,
            tooltips: {
                mode: mode,
                intersect: intersect
            },
            hover: {
                mode: mode,
                intersect: intersect
            },
            legend: {
                display: false
            },
            scales: {
                yAxes: [{
                    // display: false,
                    gridLines: {
                        display: true,
                        lineWidth: '4px',
                        color: 'rgba(0, 0, 0, .2)',
                        zeroLineColor: 'transparent'
                    },
                    ticks: $.extend({
                        beginAtZero: true,
                        suggestedMax: 200
                    }, ticksStyle)
                }],
                xAxes: [{
                    display: true,
                    gridLines: {
                        display: false
                    },
                    ticks: ticksStyle
                }]
            }
        }
    })
    </script>
}
