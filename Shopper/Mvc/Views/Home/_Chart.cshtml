@using IdentityServer4.Extensions
@using Shopper.Extensions.Helpers
@using Shopper.Mvc.Enums
@using Shopper.Services.Interfaces
@model ChartModel
@inject ITranslator Translator
@{
    var model = Model;
    string currentName = "";
    string previousName = "";
    var query = model.Sales.AsEnumerable();

    switch (Model.SummaryType)
    {
        case SummaryType.Today:
            currentName = Translator["Today Sales"];
            previousName = Translator["Yesterday Sales"];
            query = query.Where(s => s.SaleInvoice.Date.Date == DateTime.Now.Date);
            break;
        case SummaryType.Week:
            currentName = Translator["This Week Sales"];
            previousName = Translator["Last Week Sales"];
            query = query.Where(s => s.SaleInvoice.Date.WithinThisWeek());
            break;
        case SummaryType.Month:
            currentName = Translator["This Month Sales"];
            previousName = Translator["Last Month Sales"];
            query = query.Where(s => s.SaleInvoice.Date.Month == DateTime.Now.Month);
            break;
        case SummaryType.Year:
            currentName = Translator["Annual Sales"];
            query = query.Where(s => s.SaleInvoice.Date.Year == DateTime.Now.Year);
            break;
    }
}
<div class="row">
    <th:permission name="sales_graph">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header border-0">
                    <div class="d-flex justify-content-between">
                        <h3 class="card-title">
                            <i class="fas fa-chart-line mr-1"></i>
                            @currentName
                        </h3>
                        <div class="card-tools">
                            <span id="@Model.ChartId-percentage-div">
                                <span id="@Model.ChartId-percentage">
                                </span>
                                @if (!previousName.IsNullOrEmpty())
                                {
                                    <sub style="font-size: 12px">Since @previousName</sub>
                                }
                            </span>

                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-tool" data-card-widget="remove">
                                <i class="fas fa-times"></i>
                            </button>

                        </div>
                        @* <a href="javascript:void(0);">View Report</a> *@
                    </div>
                </div>
                <div class="card-body">
                    <div class="position-relative mb-4">
                        <canvas id="@Model.ChartId" height="300"></canvas>
                    </div>

                    <div class="d-flex flex-row justify-content-end">
                        @if (!currentName.IsNullOrEmpty())
                        {
                            <span class="mr-2">
                                <i class="fas fa-square text-primary"></i> @currentName
                            </span>
                        }

                        @if (!previousName.IsNullOrEmpty())
                        {
                            <span>
                                <i class="fas fa-square text-gray"></i> @previousName
                            </span>
                        }
                    </div>
                </div>
            </div>
            <!-- /.card -->
        </div>
    </th:permission>

    <th:permission name="most_selling_and_profitable_products_view">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header border-0">
                    <h3 class="card-title">@Translator["Most Selling Products"]</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-tool" data-card-widget="remove">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body table-responsive p-0">
                    <table class="table table-striped table-valign-middle">
                        <thead>
                        <tr>
                            <th>@Translator["Products"]</th>
                            <th>@Translator["Quantity"]</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (query.Any())
                        {
                            @foreach (var prodSales in query
                                .GroupBy(s => s.ProductId)
                                .Select(group => new {group.First().Product, Sales = group})
                                .OrderByDescending(arg => arg.Sales.Sum(s => s.Quantity)).Take(10))
                            {
                                <tr>
                                    <td>
                                        @if (!prodSales.Product.ImagePath.IsNullOrEmpty())
                                        {
                                            <img class="table-avatar" style="border-radius: 15%; display: inline; width: 2.5rem" src="@prodSales.Product.ImagePath.LoadProductImageThumbnail(ViewContext.HttpContext)" alt="">
                                        }
                                        else
                                        {
                                            <th:img asp-append-version="true" style="border-radius: 15%; display: inline; width: 2.5rem" src="/images/no-image-2.jpg" class="table-avatar"/>
                                        }
                                        @prodSales.Product.Name
                                    </td>
                                    <td>
                                        @prodSales.Sales.Sum(s => s.Quantity)
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="2" class="text-center">@Translator["No records found"]</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- /.card -->
        </div>
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header border-0">
                    <h3 class="card-title">@Translator["Most Profitable Products"]</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-tool" data-card-widget="remove">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body table-responsive p-0">
                    <table class="table table-striped table-valign-middle">
                        <thead>
                        <tr>
                            <th>@Translator["Product"]</th>
                            <th>@Translator["Profit"]</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (query.Any())
                        {
                            @foreach (var prodSales in query
                                .GroupBy(s => s.ProductId)
                                .Select(group => new {group.First().Product, Sales = group})
                                .OrderByDescending(arg => arg.Sales.Sum(s => s.Quantity * s.Profit)).Take(10))
                            {
                                <tr>
                                    <td>
                                        @if (!prodSales.Product.ImagePath.IsNullOrEmpty())
                                        {
                                            <img class="table-avatar" style="border-radius: 15%; display: inline; width: 2.5rem" src="@prodSales.Product.ImagePath.LoadProductImageThumbnail(ViewContext.HttpContext)" alt="">
                                        }
                                        else
                                        {
                                            <th:img asp-append-version="true" style="border-radius: 15%; display: inline; width: 2.5rem" src="/images/no-image-2.jpg" class="table-avatar"/>
                                        }
                                        @prodSales.Product.Name
                                    </td>
                                    <td>
                                        @prodSales.Sales.Sum(s => s.Quantity * s.Profit).ToString("N0")
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="2"> @Translator["No records found"] </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
            <!-- /.card -->
        </div>
    </th:permission>
</div>
